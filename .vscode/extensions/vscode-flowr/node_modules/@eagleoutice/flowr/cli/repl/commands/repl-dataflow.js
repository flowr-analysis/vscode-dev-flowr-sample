"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataflowStarCommand = exports.dataflowCommand = void 0;
const default_pipelines_1 = require("../../../core/steps/pipeline/default-pipelines");
const retriever_1 = require("../../../r-bridge/retriever");
const dfg_1 = require("../../../util/mermaid/dfg");
const clipboard = Promise.resolve().then(() => __importStar(require('clipboardy')));
const ansi_1 = require("../../../util/ansi");
/**
 * Obtain the dataflow graph using a known parser (such as the {@link RShell} or {@link TreeSitterExecutor}).
 */
async function replGetDataflow(parser, code) {
    return await (0, default_pipelines_1.createDataflowPipeline)(parser, {
        request: (0, retriever_1.requestFromInput)(code.trim())
    }).allRemainingSteps();
}
function handleString(code) {
    return code.startsWith('"') ? JSON.parse(code) : code;
}
function formatInfo(out, type, timing) {
    return out.formatter.format(`Copied ${type} to clipboard (dataflow: ${timing}ms).`, { color: 7 /* Colors.White */, effect: ansi_1.ColorEffect.Foreground, style: 3 /* FontStyles.Italic */ });
}
exports.dataflowCommand = {
    description: `Get mermaid code for the dataflow graph of R code, start with '${retriever_1.fileProtocol}' to indicate a file`,
    usageExample: ':dataflow',
    aliases: ['d', 'df'],
    script: false,
    fn: async (output, shell, remainingLine) => {
        const result = await replGetDataflow(shell, handleString(remainingLine));
        const mermaid = (0, dfg_1.graphToMermaid)({ graph: result.dataflow.graph, includeEnvironments: false }).string;
        output.stdout(mermaid);
        try {
            (await clipboard).default.writeSync(mermaid);
            output.stdout(formatInfo(output, 'mermaid code', result.dataflow['.meta'].timing));
        }
        catch { /* do nothing this is a service thing */ }
    }
};
exports.dataflowStarCommand = {
    description: 'Returns the URL to mermaid.live',
    usageExample: ':dataflow*',
    aliases: ['d*', 'df*'],
    script: false,
    fn: async (output, shell, remainingLine) => {
        const result = await replGetDataflow(shell, handleString(remainingLine));
        const mermaid = (0, dfg_1.graphToMermaidUrl)(result.dataflow.graph, false);
        output.stdout(mermaid);
        try {
            (await clipboard).default.writeSync(mermaid);
            output.stdout(formatInfo(output, 'mermaid url', result.dataflow['.meta'].timing));
        }
        catch { /* do nothing this is a service thing */ }
    }
};
//# sourceMappingURL=repl-dataflow.js.map