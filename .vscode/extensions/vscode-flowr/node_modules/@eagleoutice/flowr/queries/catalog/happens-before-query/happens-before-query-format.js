"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HappensBeforeQueryDefinition = void 0;
const ansi_1 = require("../../../util/ansi");
const time_1 = require("../../../util/time");
const joi_1 = __importDefault(require("joi"));
const happens_before_query_executor_1 = require("./happens-before-query-executor");
exports.HappensBeforeQueryDefinition = {
    executor: happens_before_query_executor_1.executeHappensBefore,
    asciiSummarizer: (formatter, _processed, queryResults, result) => {
        const out = queryResults;
        result.push(`Query: ${(0, ansi_1.bold)('happens-before', formatter)} (${(0, time_1.printAsMs)(out['.meta'].timing, 0)})`);
        for (const [key, value] of Object.entries(out.results)) {
            result.push(`   â•° ${key}: ${value}`);
        }
        return true;
    },
    schema: joi_1.default.object({
        type: joi_1.default.string().valid('happens-before').required().description('The type of the query.'),
        a: joi_1.default.string().required().description('The first slicing criterion.'),
        b: joi_1.default.string().required().description('The second slicing criterion.')
    }).description('Happens-Before tracks whether a always happens before b.')
};
//# sourceMappingURL=happens-before-query-format.js.map