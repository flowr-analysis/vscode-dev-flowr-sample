"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeHappensBefore = executeHappensBefore;
const logic_1 = require("../../../util/logic");
const log_1 = require("../../../util/log");
const cfg_1 = require("../../../util/cfg/cfg");
const happens_before_1 = require("../../../util/cfg/happens-before");
const parse_1 = require("../../../slicing/criterion/parse");
function executeHappensBefore({ ast, dataflow }, queries) {
    const start = Date.now();
    const results = {};
    const cfg = (0, cfg_1.extractCFG)(ast, dataflow.graph);
    for (const query of queries) {
        const { a, b } = query;
        const fingerprint = `${a}<${b}`;
        if (fingerprint in results) {
            log_1.log.warn('Duplicate happens-before query', query, 'ignoring');
        }
        try {
            const resolvedA = (0, parse_1.slicingCriterionToId)(a, ast.idMap);
            const resolvedB = (0, parse_1.slicingCriterionToId)(b, ast.idMap);
            results[fingerprint] = (0, happens_before_1.happensBefore)(cfg.graph, resolvedA, resolvedB);
        }
        catch (e) {
            log_1.log.error('Error while executing happens-before query', query, e);
            results[fingerprint] = logic_1.Ternary.Maybe;
        }
    }
    return {
        '.meta': {
            timing: Date.now() - start
        },
        results
    };
}
//# sourceMappingURL=happens-before-query-executor.js.map